#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram-–±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Raspberry Pi
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –∑–∞–≥—Ä—É–∑–∫—É CPU –∏ –ø–∞–º—è—Ç—å
"""

import os
import sys
import time
import subprocess
import platform
from datetime import datetime
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "YOUR_BOT_TOKEN_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ALLOWED_USERS = []  # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID –∏–∑ Telegram)

def run_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=10)
        return result.stdout.strip(), result.stderr.strip(), result.returncode
    except subprocess.TimeoutExpired:
        return "", "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", 1
    except Exception as e:
        return "", f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}", 1

def get_system_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    status = {}
    
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU
    try:
        with open('/sys/class/thermal/thermal_zone0/temp', 'r') as f:
            temp = int(f.read().strip()) / 1000.0
            status['temperature'] = f"{temp:.1f}¬∞C"
            
            if temp < 50:
                status['temp_status'] = "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è"
            elif temp < 70:
                status['temp_status'] = "‚ö† –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è"
            else:
                status['temp_status'] = "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è!"
    except Exception as e:
        status['temperature'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        status['temp_status'] = f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ CPU
    try:
        with open('/proc/loadavg', 'r') as f:
            load = f.read().strip().split()
            status['cpu_load_1'] = load[0]
            status['cpu_load_5'] = load[1]
            status['cpu_load_15'] = load[2]
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä
            with open('/proc/cpuinfo', 'r') as cpuinfo:
                cores = cpuinfo.read().count('processor')
            
            load_1_float = float(load[0])
            if load_1_float < cores * 0.7:
                status['cpu_status'] = "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è"
            elif load_1_float < cores * 1.5:
                status['cpu_status'] = "‚ö† –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è"
            else:
                status['cpu_status'] = "‚ùå –í—ã—Å–æ–∫–∞—è"
                
    except Exception as e:
        status['cpu_load_1'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        status['cpu_status'] = f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    # –ü–∞–º—è—Ç—å
    try:
        with open('/proc/meminfo', 'r') as f:
            meminfo = f.read()
            lines = meminfo.split('\n')
            
            total_mem = 0
            available_mem = 0
            
            for line in lines:
                if line.startswith('MemTotal:'):
                    total_mem = int(line.split()[1])
                elif line.startswith('MemAvailable:'):
                    available_mem = int(line.split()[1])
            
            used_mem = total_mem - available_mem
            usage_percent = (used_mem / total_mem) * 100
            
            status['memory_total'] = f"{total_mem / 1024 / 1024:.1f} GB"
            status['memory_used'] = f"{used_mem / 1024 / 1024:.1f} GB"
            status['memory_available'] = f"{available_mem / 1024 / 1024:.1f} GB"
            status['memory_usage'] = f"{usage_percent:.1f}%"
            
            if usage_percent < 80:
                status['memory_status'] = "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ"
            else:
                status['memory_status'] = "‚ö† –í—ã—Å–æ–∫–æ–µ"
                
    except Exception as e:
        status['memory_usage'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        status['memory_status'] = f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    try:
        with open('/proc/uptime', 'r') as f:
            uptime_seconds = float(f.read().split()[0])
            
        days = int(uptime_seconds // 86400)
        hours = int((uptime_seconds % 86400) // 3600)
        minutes = int((uptime_seconds % 3600) // 60)
        
        status['uptime'] = f"{days}–¥ {hours}—á {minutes}–º"
        
    except Exception as e:
        status['uptime'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    
    # –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
    try:
        stdout, stderr, returncode = run_command("df -h /")
        if returncode == 0:
            lines = stdout.split('\n')
            if len(lines) > 1:
                parts = lines[1].split()
                if len(parts) >= 5:
                    status['disk_usage'] = parts[4].rstrip('%')
                    status['disk_available'] = parts[3]
                    
                    usage = int(status['disk_usage'])
                    if usage < 90:
                        status['disk_status'] = "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
                    else:
                        status['disk_status'] = "‚ö† –ú–∞–ª–æ –º–µ—Å—Ç–∞"
                else:
                    status['disk_usage'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                    status['disk_status'] = "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"
            else:
                status['disk_usage'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                status['disk_status'] = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        else:
            status['disk_usage'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            status['disk_status'] = f"‚ùå –û—à–∏–±–∫–∞: {stderr}"
    except Exception as e:
        status['disk_usage'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        status['disk_status'] = f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    return status

def format_status_message(status):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    message = "üñ•Ô∏è <b>–°—Ç–∞—Ç—É—Å Raspberry Pi</b>\n\n"
    
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    message += f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU:</b> {status['temperature']}\n"
    message += f"   {status['temp_status']}\n\n"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ CPU
    message += f"‚ö° <b>–ó–∞–≥—Ä—É–∑–∫–∞ CPU:</b>\n"
    message += f"   1 –º–∏–Ω: {status['cpu_load_1']}\n"
    message += f"   5 –º–∏–Ω: {status['cpu_load_5']}\n"
    message += f"   15 –º–∏–Ω: {status['cpu_load_15']}\n"
    message += f"   {status['cpu_status']}\n\n"
    
    # –ü–∞–º—è—Ç—å
    message += f"üß† <b>–ü–∞–º—è—Ç—å:</b>\n"
    message += f"   –í—Å–µ–≥–æ: {status['memory_total']}\n"
    message += f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {status['memory_used']} ({status['memory_usage']})\n"
    message += f"   –î–æ—Å—Ç—É–ø–Ω–æ: {status['memory_available']}\n"
    message += f"   {status['memory_status']}\n\n"
    
    # –î–∏—Å–∫
    message += f"üíæ <b>–î–∏—Å–∫:</b>\n"
    message += f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {status['disk_usage']}\n"
    message += f"   –°–≤–æ–±–æ–¥–Ω–æ: {status['disk_available']}\n"
    message += f"   {status['disk_status']}\n\n"
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    message += f"‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {status['uptime']}\n\n"
    
    # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    message += f"üïê <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</i>"
    
    return message

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π)
    if ALLOWED_USERS and user_id not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    welcome_message = (
        "ü§ñ <b>Raspberry Pi Monitor Bot</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ, "
        "–∑–∞–≥—Ä—É–∑–∫–µ CPU –∏ –ø–∞–º—è—Ç–∏."
    )
    
    await update.message.reply_text(welcome_message, parse_mode='HTML')

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π)
    if ALLOWED_USERS and user_id not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    status_message = await update.message.reply_text("üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Å–∏—Å—Ç–µ–º–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        system_status = get_system_status()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = format_status_message(system_status)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.edit_text(formatted_message, parse_mode='HTML')
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}"
        await status_message.edit_text(error_message)
        logger.error(f"Error getting status: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π)
    if ALLOWED_USERS and user_id not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    help_text = (
        "ü§ñ <b>Raspberry Pi Monitor Bot - –°–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç /status:</b>\n"
        "‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (1, 5, 15 –º–∏–Ω—É—Ç)\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏\n"
        "‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ\n"
        "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã\n\n"
        "<b>–°—Ç–∞—Ç—É—Å—ã:</b>\n"
        "‚úÖ - –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "‚ö† - –ü–æ–≤—ã—à–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
        "‚ùå - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n\n"
        "<i>–ë–æ—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ.</i>"
    )
    
    await update.message.reply_text(help_text, parse_mode='HTML')

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if TELEGRAM_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
        print("2. –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN_HERE' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª–µ")
        return
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Raspberry Pi...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()

if __name__ == "__main__":
    main() 