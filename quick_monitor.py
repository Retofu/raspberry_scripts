#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Raspberry Pi
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π Telegram-–±–æ—Ç–∞
"""

import os
import sys
import time
import subprocess
from datetime import datetime

def run_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=10)
        return result.stdout.strip(), result.stderr.strip(), result.returncode
    except subprocess.TimeoutExpired:
        return "", "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", 1
    except Exception as e:
        return "", f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}", 1

def get_system_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ –∏ –≤ Telegram-–±–æ—Ç–µ)"""
    status = {}
    
    print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏—Å—Ç–µ–º–µ...")
    
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU
    try:
        with open('/sys/class/thermal/thermal_zone0/temp', 'r') as f:
            temp = int(f.read().strip()) / 1000.0
            status['temperature'] = f"{temp:.1f}¬∞C"
            
            if temp < 50:
                status['temp_status'] = "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è"
            elif temp < 70:
                status['temp_status'] = "‚ö† –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è"
            else:
                status['temp_status'] = "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è!"
        print(f"‚úì –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {status['temperature']} - {status['temp_status']}")
    except Exception as e:
        status['temperature'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        status['temp_status'] = f"‚ùå –û—à–∏–±–∫–∞: {e}"
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ CPU
    try:
        with open('/proc/loadavg', 'r') as f:
            load = f.read().strip().split()
            status['cpu_load_1'] = load[0]
            status['cpu_load_5'] = load[1]
            status['cpu_load_15'] = load[2]
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä
            with open('/proc/cpuinfo', 'r') as cpuinfo:
                cores = cpuinfo.read().count('processor')
            
            load_1_float = float(load[0])
            if load_1_float < cores * 0.7:
                status['cpu_status'] = "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è"
            elif load_1_float < cores * 1.5:
                status['cpu_status'] = "‚ö† –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è"
            else:
                status['cpu_status'] = "‚ùå –í—ã—Å–æ–∫–∞—è"
        print(f"‚úì CPU: 1–º={status['cpu_load_1']}, 5–º={status['cpu_load_5']}, 15–º={status['cpu_load_15']} - {status['cpu_status']}")
    except Exception as e:
        status['cpu_load_1'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        status['cpu_status'] = f"‚ùå –û—à–∏–±–∫–∞: {e}"
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ CPU: {e}")
    
    # –ü–∞–º—è—Ç—å
    try:
        with open('/proc/meminfo', 'r') as f:
            meminfo = f.read()
            lines = meminfo.split('\n')
            
            total_mem = 0
            available_mem = 0
            
            for line in lines:
                if line.startswith('MemTotal:'):
                    total_mem = int(line.split()[1])
                elif line.startswith('MemAvailable:'):
                    available_mem = int(line.split()[1])
            
            used_mem = total_mem - available_mem
            usage_percent = (used_mem / total_mem) * 100
            
            status['memory_total'] = f"{total_mem / 1024 / 1024:.1f} GB"
            status['memory_used'] = f"{used_mem / 1024 / 1024:.1f} GB"
            status['memory_available'] = f"{available_mem / 1024 / 1024:.1f} GB"
            status['memory_usage'] = f"{usage_percent:.1f}%"
            
            if usage_percent < 80:
                status['memory_status'] = "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ"
            else:
                status['memory_status'] = "‚ö† –í—ã—Å–æ–∫–æ–µ"
        print(f"‚úì –ü–∞–º—è—Ç—å: {status['memory_used']}/{status['memory_total']} ({status['memory_usage']}) - {status['memory_status']}")
    except Exception as e:
        status['memory_usage'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        status['memory_status'] = f"‚ùå –û—à–∏–±–∫–∞: {e}"
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: {e}")
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    try:
        with open('/proc/uptime', 'r') as f:
            uptime_seconds = float(f.read().split()[0])
            
        days = int(uptime_seconds // 86400)
        hours = int((uptime_seconds % 86400) // 3600)
        minutes = int((uptime_seconds % 3600) // 60)
        
        status['uptime'] = f"{days}–¥ {hours}—á {minutes}–º"
        print(f"‚úì –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status['uptime']}")
    except Exception as e:
        status['uptime'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã: {e}")
    
    # –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
    try:
        stdout, stderr, returncode = run_command("df -h /")
        if returncode == 0:
            lines = stdout.split('\n')
            if len(lines) > 1:
                parts = lines[1].split()
                if len(parts) >= 5:
                    status['disk_usage'] = parts[4].rstrip('%')
                    status['disk_available'] = parts[3]
                    
                    usage = int(status['disk_usage'])
                    if usage < 90:
                        status['disk_status'] = "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
                    else:
                        status['disk_status'] = "‚ö† –ú–∞–ª–æ –º–µ—Å—Ç–∞"
                    print(f"‚úì –î–∏—Å–∫: {status['disk_usage']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ, {status['disk_available']} —Å–≤–æ–±–æ–¥–Ω–æ - {status['disk_status']}")
                else:
                    status['disk_usage'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                    status['disk_status'] = "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"
                    print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ")
            else:
                status['disk_usage'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                status['disk_status'] = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏—Å–∫–µ")
        else:
            status['disk_usage'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            status['disk_status'] = f"‚ùå –û—à–∏–±–∫–∞: {stderr}"
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ: {stderr}")
    except Exception as e:
        status['disk_usage'] = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        status['disk_status'] = f"‚ùå –û—à–∏–±–∫–∞: {e}"
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ: {e}")
    
    return status

def format_status_message(status):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ –∏ –≤ Telegram-–±–æ—Ç–µ)"""
    message = "üñ•Ô∏è –°—Ç–∞—Ç—É—Å Raspberry Pi\n\n"
    
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    message += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: {status['temperature']}\n"
    message += f"   {status['temp_status']}\n\n"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ CPU
    message += f"‚ö° –ó–∞–≥—Ä—É–∑–∫–∞ CPU:\n"
    message += f"   1 –º–∏–Ω: {status['cpu_load_1']}\n"
    message += f"   5 –º–∏–Ω: {status['cpu_load_5']}\n"
    message += f"   15 –º–∏–Ω: {status['cpu_load_15']}\n"
    message += f"   {status['cpu_status']}\n\n"
    
    # –ü–∞–º—è—Ç—å
    message += f"üß† –ü–∞–º—è—Ç—å:\n"
    message += f"   –í—Å–µ–≥–æ: {status['memory_total']}\n"
    message += f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {status['memory_used']} ({status['memory_usage']})\n"
    message += f"   –î–æ—Å—Ç—É–ø–Ω–æ: {status['memory_available']}\n"
    message += f"   {status['memory_status']}\n\n"
    
    # –î–∏—Å–∫
    message += f"üíæ –î–∏—Å–∫:\n"
    message += f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {status['disk_usage']}\n"
    message += f"   –°–≤–æ–±–æ–¥–Ω–æ: {status['disk_available']}\n"
    message += f"   {status['disk_status']}\n\n"
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    message += f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status['uptime']}\n\n"
    
    # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    message += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
    
    return message

def test_telegram_library():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Telegram"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Telegram...")
    try:
        import telegram
        print("‚úì –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-telegram-bot –¥–æ—Å—Ç—É–ø–Ω–∞")
        print(f"  –í–µ—Ä—Å–∏—è: {telegram.__version__}")
        return True
    except ImportError:
        print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install python-telegram-bot")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –§–£–ù–ö–¶–ò–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        system_status = get_system_status()
        
        print("\n" + "=" * 50)
        print("–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï:")
        print("=" * 50)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        formatted_message = format_status_message(system_status)
        print(formatted_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Telegram
        telegram_available = test_telegram_library()
        
        print("\n" + "=" * 50)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        if telegram_available:
            print("‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞!")
            print("üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")
            print("2. –ó–∞–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ telegram_monitor_bot.py")
            print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 telegram_monitor_bot.py")
        else:
            print("‚ö† –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É Telegram –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
            print("  pip3 install python-telegram-bot")
        
        print(f"\nüïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
    except KeyboardInterrupt:
        print("\n\n‚ö† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 