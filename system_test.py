#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Raspberry Pi 3
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import time
import subprocess
import platform
from datetime import datetime

def run_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=10)
        return result.stdout.strip(), result.stderr.strip(), result.returncode
    except subprocess.TimeoutExpired:
        return "", "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", 1
    except Exception as e:
        return "", f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}", 1

def get_system_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    print("=" * 50)
    print("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï")
    print("=" * 50)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    print(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.platform()}")
    print(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}")
    print(f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}")
    print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Raspberry Pi
    try:
        with open('/proc/cpuinfo', 'r') as f:
            cpuinfo = f.read()
            if 'Raspberry Pi' in cpuinfo:
                print("‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Raspberry Pi")
            else:
                print("‚ö† –°–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ Raspberry Pi")
    except FileNotFoundError:
        print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CPU")

def get_cpu_temperature():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É CPU"""
    print("\n" + "=" * 50)
    print("–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê CPU")
    print("=" * 50)
    
    try:
        with open('/sys/class/thermal/thermal_zone0/temp', 'r') as f:
            temp = int(f.read().strip()) / 1000.0
            print(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: {temp:.1f}¬∞C")
            
            if temp < 50:
                print("‚úì –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –Ω–æ—Ä–º–µ")
            elif temp < 70:
                print("‚ö† –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ã—à–µ–Ω–∞")
            else:
                print("‚ùå –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è!")
    except FileNotFoundError:
        print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É CPU")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")

def get_memory_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏"""
    print("\n" + "=" * 50)
    print("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ê–ú–Ø–¢–ò")
    print("=" * 50)
    
    try:
        with open('/proc/meminfo', 'r') as f:
            meminfo = f.read()
            lines = meminfo.split('\n')
            
            total_mem = 0
            free_mem = 0
            available_mem = 0
            
            for line in lines:
                if line.startswith('MemTotal:'):
                    total_mem = int(line.split()[1])
                elif line.startswith('MemFree:'):
                    free_mem = int(line.split()[1])
                elif line.startswith('MemAvailable:'):
                    available_mem = int(line.split()[1])
            
            total_gb = total_mem / 1024 / 1024
            free_gb = free_mem / 1024 / 1024
            available_gb = available_mem / 1024 / 1024
            used_gb = total_gb - available_gb
            usage_percent = (used_gb / total_gb) * 100
            
            print(f"–û–±—â–∞—è –ø–∞–º—è—Ç—å: {total_gb:.1f} GB")
            print(f"–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å: {free_gb:.1f} GB")
            print(f"–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: {available_gb:.1f} GB")
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {used_gb:.1f} GB ({usage_percent:.1f}%)")
            
            if usage_percent < 80:
                print("‚úì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –Ω–æ—Ä–º–µ")
            else:
                print("‚ö† –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: {e}")

def get_disk_usage():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ"""
    print("\n" + "=" * 50)
    print("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ò–°–ö–ï")
    print("=" * 50)
    
    stdout, stderr, returncode = run_command("df -h /")
    
    if returncode == 0:
        lines = stdout.split('\n')
        if len(lines) > 1:
            parts = lines[1].split()
            if len(parts) >= 5:
                filesystem = parts[0]
                total = parts[1]
                used = parts[2]
                available = parts[3]
                usage_percent = parts[4].rstrip('%')
                
                print(f"–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {filesystem}")
                print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total}")
                print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}")
                print(f"–î–æ—Å—Ç—É–ø–Ω–æ: {available}")
                print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {usage_percent}%")
                
                if int(usage_percent) < 90:
                    print("‚úì –°–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")
                else:
                    print("‚ö† –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞!")
        else:
            print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ: {stderr}")

def get_network_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏"""
    print("\n" + "=" * 50)
    print("–°–ï–¢–ï–í–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´")
    print("=" * 50)
    
    stdout, stderr, returncode = run_command("ip addr show")
    
    if returncode == 0:
        interfaces = []
        current_interface = None
        
        for line in stdout.split('\n'):
            if line.strip().startswith(('1:', '2:', '3:', '4:')):
                if 'lo' in line:
                    current_interface = 'lo (localhost)'
                elif 'eth' in line:
                    current_interface = 'eth0 (Ethernet)'
                elif 'wlan' in line:
                    current_interface = 'wlan0 (Wi-Fi)'
                else:
                    current_interface = line.split(':')[1].strip()
                interfaces.append(current_interface)
            elif 'inet ' in line and current_interface:
                ip = line.split()[1].split('/')[0]
                print(f"{current_interface}: {ip}")
        
        if not interfaces:
            print("‚ö† –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {stderr}")

def get_uptime():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    print("\n" + "=" * 50)
    print("–í–†–ï–ú–Ø –†–ê–ë–û–¢–´ –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    try:
        with open('/proc/uptime', 'r') as f:
            uptime_seconds = float(f.read().split()[0])
            
        days = int(uptime_seconds // 86400)
        hours = int((uptime_seconds % 86400) // 3600)
        minutes = int((uptime_seconds % 3600) // 60)
        
        print(f"–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç")
        
        if days > 30:
            print("‚ö† –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞")
        else:
            print("‚úì –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã: {e}")

def test_gpio_access():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ GPIO"""
    print("\n" + "=" * 50)
    print("–ü–†–û–í–ï–†–ö–ê GPIO")
    print("=" * 50)
    
    try:
        import RPi.GPIO as GPIO
        print("‚úì –ú–æ–¥—É–ª—å RPi.GPIO –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º
        GPIO.setmode(GPIO.BCM)
        print("‚úì GPIO —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –û—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        GPIO.cleanup()
        print("‚úì GPIO –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except ImportError:
        print("‚ö† –ú–æ–¥—É–ª—å RPi.GPIO –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt-get install python3-rpi.gpio")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GPIO: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–û–ì–û –°–ö–†–ò–ü–¢–ê –î–õ–Ø RASPBERRY PI 3")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        get_system_info()
        get_cpu_temperature()
        get_memory_info()
        get_disk_usage()
        get_network_info()
        get_uptime()
        test_gpio_access()
        
        print("\n" + "=" * 50)
        print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 50)
        print(f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
    except KeyboardInterrupt:
        print("\n\n‚ö† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 